---
import '../styles/tabs.css';

// --- НАШ ЕДИНЫЙ СПИСОК ТРЕКОВ ---
const allTracks = [
  { id: 'mockingbird', title: 'Mockingbird', structure: 'от 1 куплета и 1 припева до 2 куплетов и 2 припевов', duration: 'от 2:15 до 4:10', videoId: '2WZBG1n3dTo' },
  { id: 'without_me', title: 'Without Me', structure: 'от 1 куплета и 1 припева до 2 куплетов и 2 припевов', duration: 'от 2:05 до 3:05', videoId: 'jD5TE5C32oI' },
  { id: 'lose_yourself', title: 'Lose Yourself', structure: 'от 1 куплета и 1 припева до 3 куплетов и 3 припевов', duration: 'от 1:35 до 4:35', videoId: '-5hTQFPnz54' },
  { id: 'real_slim_shady', title: 'Real Slim Shady', structure: '1 куплет и 1 припев', duration: '1:50', videoId: '8_5eteU3fMY' },
  { id: 'superman', title: 'Superman', structure: '1 куплет и 1 припев', duration: '1:55', videoId: 'YWwLk-FBUqk' },
  { id: 'love_the_way_you_lie', title: 'Love The Way You Lie', structure: 'от 1 куплета и 1 припева до 2 куплетов и 2 припевов', duration: 'от 1:40 до 2:55', videoId: 'J5f8N7fDgEE' },
  { id: 'stan', title: 'Stan', structure: '3 припева и 1 куплет', duration: '2:00', videoId: '2sSMLL0BT6A' },
  { id: 'rap_god', title: 'Rap God', structure: '1 припев + быстрая часть', duration: '0:55', videoId: '1Di6T_CYKUw' },
  { id: 'monster', title: 'Monster', structure: '1 куплет и 1 припев', duration: '1:25', videoId: 'IXR_LfjMlT8' },
  { id: 'smack_that', title: 'Smack That', structure: '1 куплет и 2 припева', duration: '1:50', videoId: 'TdRnFP2NSZE' },
  { id: 'not_afraid', title: 'Not Afraid', structure: 'от 1 куплета и 1 припева до 1 бриджа, 2 куплетов и 2 припевов', duration: 'от 1:30 до 3:00', videoId: 'j0igfpz9wMk' },
  { id: 'houdini', title: 'Houdini', structure: '1 куплет, 1 бридж и 1 припев', duration: '1:40', videoId: '22tVWwmTie8' },
  { id: 'beautiful', title: 'Beautiful', structure: '1 куплет, 1 припев', duration: '1:55', videoId: 'GQAe-jqR4ZA' },
  { id: 'space_bound', title: 'Space Bound', structure: 'от 1 куплета и 1 припева до 2 куплетов, 1 бриджа и 2 припевов', duration: 'от 1:40 до 3:10', videoId: 'gLwNQTcEF34' },
  { id: 'airplanes', title: 'Airplanes', structure: '1 куплет, 1 бридж и 2 припева', duration: '2:35', videoId: 'lvG0kNWR8AE' },
  { id: 'when_im_gone', title: 'When I’m Gone', structure: '1 куплет и 1 припев', duration: '1:20', videoId: '7mTsW-rDEIg' },
  { id: 'godzilla', title: 'Godzilla', structure: '1 припев и быстрая часть', duration: '1:00', videoId: 'P92ByHRwa5k' },
  { id: 'till_i_collapse', title: 'Till I Collapse', structure: 'интро, 1 куплет, 1 припев и аутро', duration: '2:25', videoId: 'cIdIldktihI' },
  { id: 'you_dont_know', title: 'You Don’t Know', structure: '1 куплет и 2 припева', duration: '1:30', videoId: 'q46sR5uXBbw' },
  { id: 'i_need_a_doctor', title: 'I Need a Doctor', structure: '2 припева и 1 куплет', duration: '1:45', videoId: 'fsoekvs-RmE' },
  { id: 'no_love', title: 'No Love', structure: '1 куплет и 1 припев', duration: '2:30', videoId: 'zBkKB1CEQUY' },
  { id: 'fast_lane', title: 'Fast Lane', structure: '1 куплет и 1 припев', duration: '1:10', videoId: 'mTVSxKNF1Hg' },
  { id: 'forever', title: 'Forever', structure: '1 куплет и 2 припева', duration: '1:50', videoId: 'eDuRoPIOBjE' },
  { id: 'despicable', title: 'Despicable', structure: '1 куплет', duration: '2:15', videoId: 'hPeGwtnB7Sc' },
  { id: 'venom', title: 'Venom', structure: '1 куплет и 1 припев', duration: '1:45', videoId: 'DVDXrZMlgTM' },
  { id: 'sing_for_the_moment', title: 'Sing For The Moment', structure: 'интро, 1 куплет и 1 припев', duration: '1:40', videoId: 'D4hAVemuQXY' },
  { id: 'my_name_is', title: 'My Name Is', structure: '1 куплет и 2 припева', duration: '1:30', videoId: 'sNPnbI1arSE' },
  { id: 'ass_like_that', title: 'Ass Like That', structure: '1 куплет и 2 припева', duration: '1:40', videoId: 'um4-d7VzZiE' },
  { id: 'cleanin_out_my_closet', title: 'Cleanin’ Out My Closet', structure: '1 куплет и 1 припев', duration: '1:20', videoId: 'RQ9_TKayu9s' },
  { id: 'hailies_song', title: 'Hailie’s Song', structure: '2 куплета и 2 припева', duration: '3:25', videoId: 'tD5oQQ-CQ4E' },
  { id: 'just_lose_it', title: 'Just Lose It', structure: '1 куплет и 1 припев', duration: '1:30', videoId: '70PAy7yXjPI' },
  { id: 'shake_that_ass', title: 'Shake That Ass', structure: '1 куплет, 1 припев и 1 бридж', duration: '1:40', videoId: 'WrjwGPb0Hvw' },
  { id: 'we_made_you', title: 'We Made You', structure: '1 куплет, 1 припев, 1 бридж и аутро', duration: '2:15', videoId: 'RSdKmX2BH7o' },
  { id: 'marshall_mathers', title: 'Marshall Mathers', structure: '1 куплет и 3 припева', duration: '2:30', videoId: 'XGSrs0QIUAc' },
  { id: 'like_a_toy_soldiers', title: 'Like a Toy Soldiers', structure: '1 куплет и 2 припева', duration: '2:20', videoId: 'lexLAjh8fPA' },
  { id: 'business', title: 'Business', structure: '1 куплет и 1 припев', duration: '1:10', videoId: 'P05bTId-92A' },
  { id: 'all_she_wrote', title: 'All She Wrote', structure: '1 куплет и 2 припева', duration: '1:45', videoId: 'OItsfklZC-Y' },
  { id: 'forgot_about_dre', title: 'Forgot About Dre', structure: '1 куплет и 2 припева', duration: '1:45', videoId: 'QFcv5Ma8u8k' },
];

// --- НАШ СПИСОК ПОДБОРОК (СЕТ-ЛИСТОВ) ---
const setlists = [
    { 
        title: 'Золотые Хиты', 
        icon: 'fas fa-star text-amber-400', 
        trackIds: ['lose_yourself', 'without_me', 'real_slim_shady', 'love_the_way_you_lie', 'monster', 'not_afraid', 'mockingbird', 'stan', 'forgot_about_dre'] 
    },
    { 
        title: 'Взрыв энергии', 
        icon: 'fas fa-rocket text-red-500', 
        trackIds: ['till_i_collapse', 'rap_god', 'venom', 'sing_for_the_moment', 'you_dont_know', 'lose_yourself', 'forever', 'business', 'i_need_a_doctor', 'all_she_wrote'] 
    },
    { 
        title: 'Клубные хиты', 
        icon: 'fas fa-fire text-orange-500', 
        trackIds: ['smack_that', 'ass_like_that', 'shake_that_ass', 'superman', 'without_me', 'real_slim_shady', 'monster', 'houdini', 'we_made_you'] 
    },
    { 
        title: 'Немного грусти', 
        icon: 'fas fa-heart-broken text-sky-400', 
        trackIds: ['stan', 'mockingbird', 'beautiful', 'space_bound', 'love_the_way_you_lie', 'airplanes', 'when_im_gone', 'hailies_song', 'cleanin_out_my_closet', 'marshall_mathers', 'like_a_toy_soldiers'] 
    },
    { 
        title: 'Весёлый вайб', 
        icon: 'fas fa-sun text-yellow-400', 
        trackIds: ['my_name_is', 'without_me', 'real_slim_shady', 'houdini', 'just_lose_it', 'shake_that_ass', 'ass_like_that', 'we_made_you'] 
    },
    { 
        title: 'Техничный хип-хоп', 
        icon: 'fas fa-gears text-slate-400', 
        trackIds: ['rap_god', 'godzilla', 'no_love', 'fast_lane', 'forever', 'despicable'] 
    }
];

// Разделяем треки на видимые и скрытые
const visibleTracks = allTracks.slice(0, 10);
const hiddenTracks = allTracks.slice(10);
---

<section id="repertoire" class="py-16 md:py-24 bg-opacity-50 bg-gray-950">
    <div class="container mx-auto px-6 reveal">
        <div class="text-center md:text-left">
            <h2 class="section-title text-3xl md:text-4xl mb-4 gradient-text">Репертуар</h2>
        </div>
        <p class="text-center text-lg text-gray-400 mb-8">Кавер-выступления на треки Eminem. Выберите готовый сет-лист или соберите свой из полного списка.</p>
        
        <div class="flex justify-center mb-12">
            <div class="tabs" id="repertoire-toggle">
                <span class="glider"></span>
                <button class="tab-btn active" data-target="repertoire-all-tracks"><i class="fas fa-music mr-2"></i>Все треки</button>
                <button class="tab-btn" data-target="repertoire-setlists"><i class="fas fa-layer-group mr-2"></i>Подборки</button>
            </div>
        </div>

<div id="repertoire-all-tracks" class="content-panel active">
            <div class="repertoire-list max-w-4xl mx-auto">
                {visibleTracks.map(track => (
                  <div class="repertoire-item">
                    <div class="repertoire-info">
                      <strong class="repertoire-title">{track.title}</strong>
                      <div class="repertoire-details">
                        <div class="repertoire-detail-row"><i class="fas fa-microphone-alt"></i><span>{track.structure}</span></div>
                        <div class="repertoire-detail-row"><i class="fas fa-clock"></i><span>{track.duration}</span></div>
                      </div>
                    </div>
                    <a href="#" data-modal-trigger="videoModal" data-video-src={track.videoId} class="btn-repertoire">Смотреть пример</a>
                  </div>
                ))}
                
                <div id="hidden-repertoire-container" class="hidden-repertoire-container">
                    {hiddenTracks.map(track => (
                      <div class="repertoire-item">
                        <div class="repertoire-info">
                          <strong class="repertoire-title">{track.title}</strong>
                          <div class="repertoire-details">
                            <div class="repertoire-detail-row"><i class="fas fa-microphone-alt"></i><span>{track.structure}</span></div>
                            <div class="repertoire-detail-row"><i class="fas fa-clock"></i><span>{track.duration}</span></div>
                          </div>
                        </div>
                        <a href="#" data-modal-trigger="videoModal" data-video-src={track.videoId} class="btn-repertoire">Смотреть пример</a>
                      </div>
                    ))}
                </div>
            </div>
            <div class="text-center mt-8">
                <button id="toggleRepertoireBtn" class="btn-secondary text-lg font-semibold py-3 px-8 rounded-lg">Показать весь репертуар</button>
            </div>
        </div>

        <div id="repertoire-setlists" class="content-panel">
            <div class="accordion-container max-w-4xl mx-auto">
                {setlists.map(setlist => {
                  // Для каждого сетлиста находим полные данные о треках
                  const tracksInSetlist = setlist.trackIds.map(id => 
                    allTracks.find(track => track.id === id)
                  ).filter(Boolean); // filter(Boolean) удаляет треки, если они вдруг не нашлись

                  return (
                    <div class="accordion-item">
                      <button class="accordion-header">
                        <span class="setlist-title"><i class={setlist.icon}></i> {setlist.title}</span>
                        <i class="fas fa-chevron-down accordion-icon"></i>
                      </button>
                      <div class="accordion-body">
                        <div class="repertoire-list">
                          {/* Вложенный цикл: рисуем треки для этого сетлиста */}
                          {tracksInSetlist.map(track => (
                            <div class="repertoire-item">
                              <div class="repertoire-info">
                                <strong class="repertoire-title">{track!.title}</strong>
                                <div class="repertoire-details">
                                  <div class="repertoire-detail-row"><i class="fas fa-microphone-alt"></i><span>{track!.structure}</span></div>
                                  <div class="repertoire-detail-row"><i class="fas fa-clock"></i><span>{track!.duration}</span></div>
                                </div>
                              </div>
                              <a href="#" data-modal-trigger="videoModal" data-video-src={track!.videoId} class="btn-repertoire">Смотреть пример</a>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  )
                })}
            </div>
        </div>
    </div>
</section>

<script is:inline>
document.addEventListener('DOMContentLoaded', () => {
    // --- ВСПОМОГАТЕЛЬНАЯ ФУНКЦИЯ ДЛЯ ПЛАВНОГО СКРОЛЛА ---
    function smoothScrollTo(element, duration = 400) {
      const targetPosition = element.getBoundingClientRect().top + window.scrollY - (window.innerHeight / 2) + (element.clientHeight / 2);
      const startPosition = window.scrollY;
      const distance = targetPosition - startPosition;
      let startTime = null;

      function animation(currentTime) {
        if (startTime === null) {
          startTime = currentTime;
        }
        const timeElapsed = currentTime - startTime;
        const run = ease(timeElapsed, startPosition, distance, duration);
        window.scrollTo(0, run);

        if (timeElapsed < duration) {
          requestAnimationFrame(animation);
        }
      }

      function ease(t, b, c, d) {
        t /= d / 2;
        if (t < 1) return c / 2 * t * t + b;
        t--;
        return -c / 2 * (t * (t - 2) - 1) + b;
      }

      requestAnimationFrame(animation);
    }
    // --- ЛОГИКА ДЛЯ ТАБОВ И ГЛАЙДЕРА ---
    const tabsContainer = document.getElementById('repertoire-toggle');
    const allTracksPanel = document.getElementById('repertoire-all-tracks');
    const setlistsPanel = document.getElementById('repertoire-setlists');

    if (!tabsContainer || !allTracksPanel || !setlistsPanel) {
      console.error('Repertoire tabs elements not found!');
    } else {
      const glider = tabsContainer.querySelector('.glider');
      const tabButtons = Array.from(tabsContainer.querySelectorAll('.tab-btn'));
      const panels = [allTracksPanel, setlistsPanel];

      const updateGlider = () => {
        if (!glider) return;
        const active = tabsContainer.querySelector('.tab-btn.active');
        if (!active) return;

        const isMobile = window.innerWidth <= 640;
        if (isMobile) {
          glider.style.width = 'calc(100% - 10px)';
          glider.style.left = '5px';
          glider.style.height = active.offsetHeight + 'px';
          glider.style.top = active.offsetTop + 'px';
        } else {
          glider.style.height = 'calc(100% - 10px)';
          glider.style.top = '5px';
          glider.style.width = active.offsetWidth + 'px';
          glider.style.left = active.offsetLeft + 'px';
        }
      };

      const showPanel = (id) => {
        panels.forEach((p) => {
          if (p.id === id) {
            p.classList.remove('active');
            void p.offsetWidth;
            p.classList.add('active');
          } else {
            p.classList.remove('active');
          }
        });
      };

      tabButtons.forEach((btn) => {
        btn.addEventListener('click', () => {
          tabButtons.forEach((b) => b.classList.remove('active'));
          btn.classList.add('active');
          const target = btn.getAttribute('data-target');
          if (target) showPanel(target);
          updateGlider();
        });
      });

      updateGlider();
      window.addEventListener('resize', updateGlider);
      setTimeout(updateGlider, 0);
    }

    // --- ЛОГИКА ДЛЯ КНОПКИ "ПОКАЗАТЬ ВСЁ" ---
    const toggleBtn = document.getElementById('toggleRepertoireBtn');
    const hiddenContainer = document.getElementById('hidden-repertoire-container');

    if (toggleBtn && hiddenContainer) {
      toggleBtn.addEventListener('click', () => {
        const isExpanded = hiddenContainer.classList.contains('is-expanded');
        if (isExpanded) {
          hiddenContainer.style.maxHeight = '0';
          hiddenContainer.classList.remove('is-expanded');
          toggleBtn.textContent = 'Показать весь репертуар';
          setTimeout(() => {
            smoothScrollTo(toggleBtn, 100);
          }, 700);
        } else {
          hiddenContainer.style.maxHeight = hiddenContainer.scrollHeight + 'px';
          hiddenContainer.classList.add('is-expanded');
          toggleBtn.textContent = 'Скрыть';
        }
      });
    }

    // --- ЛОГИКА ДЛЯ АККОРДЕОНА ---
    const accordionHeaders = document.querySelectorAll('.accordion-header');
    accordionHeaders.forEach(header => {
      header.addEventListener('click', () => {
        const accordionBody = header.nextElementSibling;
        if (accordionBody) {
          header.classList.toggle('active');
          if (header.classList.contains('active')) {
            accordionBody.style.maxHeight = accordionBody.scrollHeight + 'px';
          } else {
            accordionBody.style.maxHeight = '0';
          }
        }
      });
    });
  });
</script>

<style>
.repertoire-list {
    counter-reset: track-counter;
}
.repertoire-item {
    display: grid;
    grid-template-columns: auto 1fr auto;
    gap: 1rem;
    align-items: center; 
    padding: 1.25rem 1rem;
    border-bottom: 1px solid rgba(0, 255, 255, 0.1);
    transition: background-color 0.3s ease;
}
.repertoire-item:hover {
    background-color: rgba(0, 255, 255, 0.05);
}
.repertoire-list .repertoire-item:last-child {
    border-bottom: none;
}
.repertoire-item::before {
    counter-increment: track-counter;
    content: counter(track-counter);
    font-weight: 700;
    font-size: 1.5rem;
    background: linear-gradient(90deg, #00ffff, #ff00ff);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-fill-color: transparent;
    min-width: 2rem;
    text-align: center; 
}
.repertoire-info {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
}
.repertoire-title {
    font-size: 1.25rem;
    line-height: 1.75rem;
    font-weight: 600;
    color: #e5e7eb;
}
.repertoire-details {
    margin-top: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}
.repertoire-detail-row {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
    color: #9ca3af;
}
.repertoire-detail-row i {
    color: #00ffff;
    width: 1rem;
    text-align: center;
    flex-shrink: 0;
    margin-top: 0.2rem;
}
.btn-repertoire {
    background-color: #3b82f6;
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    text-decoration: none;
    transition: background-color 0.3s ease;
    font-size: 0.875rem;
    line-height: 1.25rem;
    white-space: nowrap;
}
.btn-repertoire:hover {
    background-color: #2563eb;
}
/* --- ЗАМЕНИТЬ СТАРЫЙ БЛОК НА ЭТОТ --- */
/* Новая логика аккордеона репертуара на CSS Grid */

.hidden-repertoire-container {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.7s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Внутренняя обертка нужна, чтобы скрыть контент во время анимации */
.repertoire-inner-wrapper {
  overflow: hidden;
}
/* --- КОНЕЦ НОВОГО БЛОКА --- */

.accordion-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}
.accordion-item {
    border: 1px solid rgba(0, 255, 255, 0.2);
    border-radius: 0.5rem;
    overflow: hidden;
    transition: background-color 0.3s ease;
}
.accordion-item:hover {
    background-color: rgba(26, 26, 46, 0.4);
}
.accordion-header {
    width: 100%;
    background-color: transparent;
    padding: 1rem 1.5rem;
    border: none;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    text-align: left;
}
.accordion-header .setlist-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: #e0e0e0;
    display: flex;
    align-items: center;
    gap: 0.75rem;
}
.accordion-icon {
    transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    color: #00ffff;
}
.accordion-header.active .accordion-icon {
    transform: rotate(180deg);
}
.accordion-body {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    background-color: rgba(10, 10, 10, 0.5);
}
.accordion-body .repertoire-list {
    padding: 0.5rem 0;
    counter-reset: track-counter;
}
.accordion-body .repertoire-item {
    grid-template-columns: auto 1fr auto;
    padding-left: 1.5rem;
    padding-right: 1.5rem;
    align-items: center;
}
.accordion-body .repertoire-item::before {
    counter-increment: track-counter;
    content: counter(track-counter);
    display: block;
}


@media (max-width: 640px) {
    .repertoire-item {
        grid-template-columns: auto 1fr;
        grid-template-rows: auto auto;
        column-gap: 1rem; 
        row-gap: 1rem;
        padding: 1rem 0.5rem;
        align-items: start;
    }
    .repertoire-item::before {
        grid-row: 1 / 2;
        grid-column: 1 / 2;
        align-self: center; 
        justify-self: center;
        font-size: 1.25rem;
        line-height: 1.125rem;
        padding-top: 0.1rem;
        text-align: center; 
    }
    .repertoire-info {
        grid-row: 1 / 2;
        grid-column: 2 / 3;
    }
    .repertoire-title {
        font-size: 1.125rem;
        line-height: 1.5rem;
    }
    .btn-repertoire {
        grid-row: 2 / 3;
        grid-column: 2 / 3;
        justify-self: start;
    }
    .accordion-header .setlist-title {
        font-size: 1.125rem;
    }
    .accordion-body .repertoire-item {
        grid-template-columns: auto 1fr;
        grid-template-rows: auto auto;
        align-items: start;
        padding-left: 1rem;
        padding-right: 1rem;
        row-gap: 1rem;
    }
}
</style>