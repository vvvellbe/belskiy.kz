---
import '../styles/tabs.css';
import { TRACK_LIST } from '../scripts/configurator-data.js';
import { setlists } from '../data/setlists.js';

// --- ФУНКЦИЯ-ПОМОЩНИК для получения ID видео из ссылки ---
const getYouTubeId = (url: string) => {
  try {
    const urlObj = new URL(url);
    if (urlObj.hostname === 'youtu.be') {
      return urlObj.pathname.slice(1);
    }
    // Для стандартных ссылок вроде /watch?v=...
    const videoId = urlObj.searchParams.get('v');
    if (videoId) return videoId;
    // Для ссылок /shorts/... или /embed/...
    const pathParts = urlObj.pathname.split('/');
    return pathParts[pathParts.length - 1];
  } catch (e) {
    // Если по какой-то причине это не ссылка, а просто ID
    return url;
  }
};

// Разделяем треки на видимые и скрытые
const visibleTracks = TRACK_LIST.slice(0, 10);
const hiddenTracks = TRACK_LIST.slice(10);
---

<section id="repertoire" class="py-16 md:py-24">
    <div class="container mx-auto px-6 reveal">
        <div class="text-center md:text-left">
            <h2 class="section-title text-3xl md:text-4xl mb-4 gradient-text">Репертуар</h2>
        </div>
        <p class="text-center text-lg mb-8">Кавер-выступления на треки Eminem. Выберите готовый сет-лист или соберите свой из полного списка.</p>
        <div class="flex justify-center mb-12">
            <div class="tabs" id="repertoire-toggle">
                <span class="glider"></span>
                <button class="tab-btn active" data-target="repertoire-all-tracks"><i class="fas fa-music mr-2"></i>Все треки</button>
                <button class="tab-btn" data-target="repertoire-setlists"><i class="fas fa-layer-group mr-2"></i>Подборки</button>
            </div>
        </div>

<div id="repertoire-all-tracks" class="content-panel active">
            <div class="repertoire-list max-w-4xl mx-auto">
                {visibleTracks.map(track => (
                  <div class="repertoire-item">
                      <div class="repertoire-info">
                          <strong class="repertoire-title">{track.name}</strong>
                          <div class="repertoire-details">
                              <div class="repertoire-detail-row"><i class="fas fa-microphone-alt"></i><span>{track.structure}</span></div>
                              <div class="repertoire-detail-row"><i class="fas fa-clock"></i><span>{track.duration}</span></div>
                          </div>
                      </div>
                      <a href="#" data-modal-trigger="videoModal" data-video-src={getYouTubeId(track.url)} class="btn-repertoire">Смотреть пример</a>
                  </div>
                ))}
                
                <div id="hidden-repertoire-container" class="hidden-repertoire-container">
                    {hiddenTracks.map(track => (
                      <div class="repertoire-item">
                          <div class="repertoire-info">
                              <strong class="repertoire-title">{track.name}</strong>
                              <div class="repertoire-details">
                                  <div class="repertoire-detail-row"><i class="fas fa-microphone-alt"></i><span>{track.structure}</span></div>
                                  <div class="repertoire-detail-row"><i class="fas fa-clock"></i><span>{track.duration}</span></div>
                              </div>
                          </div>
                          <a href="#" data-modal-trigger="videoModal" data-video-src={getYouTubeId(track.url)} class="btn-repertoire">Смотреть пример</a>
                      </div>
                    ))}
                </div>
            </div>
            <div class="text-center mt-8">
                <button id="toggleRepertoireBtn" class="btn-secondary text-lg font-semibold py-3 px-8 rounded-lg">Показать весь репертуар</button>
            </div>
        </div>

        <div id="repertoire-setlists" class="content-panel">
            <div class="accordion-container max-w-4xl mx-auto">
                {setlists.map(setlist => {
                    // Для каждого сетлиста находим полные данные о треках
                    const tracksInSetlist = setlist.trackIds.map(id => 
                        TRACK_LIST.find(track => track.id === id)
                    ).filter(Boolean); // filter(Boolean) удаляет треки, если они вдруг не нашлись

                    return (
                        <div class="accordion-item">
                            <button class="accordion-header">
                                <span class="setlist-title"><i class={setlist.icon}></i> {setlist.title}</span>
                                <i class="fas fa-chevron-down accordion-icon"></i>
                            </button>
                            <div class="accordion-body">
                                <div class="repertoire-list">
                                    {/* Вложенный цикл: рисуем треки для этого сетлиста */}
                                    {tracksInSetlist.map(track => (
                                        <div class="repertoire-item">
                                            <div class="repertoire-info">
                                                <strong class="repertoire-title">{track!.name}</strong>
                                                <div class="repertoire-details">
                                                    <div class="repertoire-detail-row"><i class="fas fa-microphone-alt"></i><span>{track!.structure}</span></div>
                                                    <div class="repertoire-detail-row"><i class="fas fa-clock"></i><span>{track!.duration}</span></div>
                                                </div>
                                            </div>
                                            <a href="#" data-modal-trigger="videoModal" data-video-src={getYouTubeId(track!.url)} class="btn-repertoire">Смотреть пример</a>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    )
                })}
            </div>
        </div>
    </div>
</section>

<script is:inline>
document.addEventListener('DOMContentLoaded', () => {
    // --- ВСПОМОГАТЕЛЬНАЯ ФУНКЦИЯ ДЛЯ ПЛАВНОГО СКРОЛЛА ---
    function smoothScrollTo(element, duration = 400) {
      const targetPosition = element.getBoundingClientRect().top + window.scrollY - (window.innerHeight / 2) + (element.clientHeight / 2);
      const startPosition = window.scrollY;
      const distance = targetPosition - startPosition;
      let startTime = null;

      function animation(currentTime) {
        if (startTime === null) {
          startTime = currentTime;
        }
        const timeElapsed = currentTime - startTime;
        const run = ease(timeElapsed, startPosition, distance, duration);
        window.scrollTo(0, run);

        if (timeElapsed < duration) {
          requestAnimationFrame(animation);
        }
      }

      function ease(t, b, c, d) {
        t /= d / 2;
        if (t < 1) return c / 2 * t * t + b;
        t--;
        return -c / 2 * (t * (t - 2) - 1) + b;
      }

      requestAnimationFrame(animation);
    }
    // --- ЛОГИКА ДЛЯ ТАБОВ И ГЛАЙДЕРА ---
    const tabsContainer = document.getElementById('repertoire-toggle');
    const allTracksPanel = document.getElementById('repertoire-all-tracks');
    const setlistsPanel = document.getElementById('repertoire-setlists');

    if (!tabsContainer || !allTracksPanel || !setlistsPanel) {
      console.error('Repertoire tabs elements not found!');
    } else {
      const glider = tabsContainer.querySelector('.glider');
      const tabButtons = Array.from(tabsContainer.querySelectorAll('.tab-btn'));
      const panels = [allTracksPanel, setlistsPanel];

      const updateGlider = () => {
        if (!glider) return;
        const active = tabsContainer.querySelector('.tab-btn.active');
        if (!active) return;

        const isMobile = window.innerWidth <= 640;
        if (isMobile) {
          glider.style.width = 'calc(100% - 10px)';
          glider.style.left = '5px';
          glider.style.height = active.offsetHeight + 'px';
          glider.style.top = active.offsetTop + 'px';
        } else {
          glider.style.height = 'calc(100% - 10px)';
          glider.style.top = '5px';
          glider.style.width = active.offsetWidth + 'px';
          glider.style.left = active.offsetLeft + 'px';
        }
      };

      const showPanel = (id) => {
        panels.forEach((p) => {
          if (p.id === id) {
            p.classList.remove('active');
            void p.offsetWidth;
            p.classList.add('active');
          } else {
            p.classList.remove('active');
          }
        });
      };

      tabButtons.forEach((btn) => {
        btn.addEventListener('click', () => {
          tabButtons.forEach((b) => b.classList.remove('active'));
          btn.classList.add('active');
          const target = btn.getAttribute('data-target');
          if (target) showPanel(target);
          updateGlider();
        });
      });

      updateGlider();
      window.addEventListener('resize', updateGlider);
      setTimeout(updateGlider, 0);
    }

    // --- ЛОГИКА ДЛЯ КНОПКИ "ПОКАЗАТЬ ВСЁ" ---
    const toggleBtn = document.getElementById('toggleRepertoireBtn');
    const hiddenContainer = document.getElementById('hidden-repertoire-container');

    if (toggleBtn && hiddenContainer) {
      toggleBtn.addEventListener('click', () => {
        const isExpanded = hiddenContainer.classList.contains('is-expanded');
        if (isExpanded) {
          hiddenContainer.style.maxHeight = '0';
          hiddenContainer.classList.remove('is-expanded');
          toggleBtn.textContent = 'Показать весь репертуар';
          setTimeout(() => {
            smoothScrollTo(toggleBtn, 100);
          }, 700);
        } else {
          hiddenContainer.style.maxHeight = hiddenContainer.scrollHeight + 'px';
          hiddenContainer.classList.add('is-expanded');
          toggleBtn.textContent = 'Скрыть';
        }
      });
    }

    // --- ЛОГИКА ДЛЯ АККОРДЕОНА ---
    const accordionHeaders = document.querySelectorAll('.accordion-header');
    accordionHeaders.forEach(header => {
      header.addEventListener('click', () => {
        const accordionBody = header.nextElementSibling;
        if (accordionBody) {
          header.classList.toggle('active');
          if (header.classList.contains('active')) {
            accordionBody.style.maxHeight = accordionBody.scrollHeight + 'px';
          } else {
            accordionBody.style.maxHeight = '0';
          }
        }
      });
    });
  });
</script>

<style>
.repertoire-list {
   counter-reset: track-counter;
}
.repertoire-item {
   display: grid;
   grid-template-columns: auto 1fr auto;
   gap: 1rem;
   align-items: center; 
   padding: 1.25rem 1rem;
   border-bottom: 1px solid rgba(107, 114, 128, 0.1);
   transition: background-color 0.3s ease;
}
.repertoire-item:hover {
   background-color: rgba(17, 24, 39, 0.4);
}
.repertoire-list .repertoire-item:last-child {
   border-bottom: none;
}
.repertoire-item::before {
   counter-increment: track-counter;
   content: counter(track-counter);
   font-weight: 700;
   font-size: 1.5rem;
   background: linear-gradient(90deg, #00ffff, #ff00ff);
   -webkit-background-clip: text;
   -webkit-text-fill-color: transparent;
   background-clip: text;
   text-fill-color: transparent;
   min-width: 2rem;
   text-align: center; 
}
.repertoire-info {
   display: flex;
   flex-direction: column;
   align-items: flex-start;
}
.repertoire-title {
   font-size: 1.25rem;
   line-height: 1.75rem;
   font-weight: 600;
   color: #e5e7eb;
}
.repertoire-details {
   margin-top: 0.5rem;
   display: flex;
   flex-direction: column;
   gap: 0.25rem;
}
.repertoire-detail-row {
   display: flex;
   align-items: flex-start;
   gap: 0.5rem;
   font-size: 0.875rem;
   line-height: 1.25rem;
   color: #9ca3af;
}
.repertoire-detail-row i {
   color: #00ffff;
   width: 1rem;
   text-align: center;
   flex-shrink: 0;
   margin-top: 0.2rem;
}
.btn-repertoire {
   background-color: #3b82f6;
   color: white;
   padding: 0.5rem 1rem;
   border-radius: 0.375rem;
   text-decoration: none;
   transition: background-color 0.3s ease;
   font-size: 0.875rem;
   line-height: 1.25rem;
   white-space: nowrap;
}
.btn-repertoire:hover {
   background-color: #2563eb;
}
.hidden-repertoire-container {
   max-height: 0;
   overflow: hidden;
   transition: max-height 0.7s cubic-bezier(0.4, 0, 0.2, 1);
}
.accordion-container {
   display: flex;
   flex-direction: column;
   gap: 1rem;
}
.accordion-item {
   background: rgba(17, 24, 39, 0.6);
   backdrop-filter: blur(12px);
   -webkit-backdrop-filter: blur(12px);
   border: 1px solid rgba(107, 114, 128, 0.2);
   box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.2);
   border-radius: 0.5rem;
   overflow: hidden;
   transition: background-color 0.3s ease, border-color 0.3s ease;
}
.accordion-item:hover {
   border-color: rgba(0, 255, 255, 0.3);
   background-color: rgba(17, 24, 39, 0.8);
}
.accordion-header {
   width: 100%;
   background-color: transparent;
   padding: 1rem 1.5rem;
   border: none;
   cursor: pointer;
   display: flex;
   justify-content: space-between;
   align-items: center;
   text-align: left;
}
.accordion-header .setlist-title {
   font-size: 1.25rem;
   font-weight: 700;
   color: #e0e0e0;
   display: flex;
   align-items: center;
   gap: 0.75rem;
}
.accordion-icon {
   transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
   color: #00ffff;
}
.accordion-header.active .accordion-icon {
   transform: rotate(180deg);
}
.accordion-body {
   max-height: 0;
   overflow: hidden;
   transition: max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1);
   background-color: transparent;
}
.accordion-body .repertoire-list {
   padding: 0.5rem 0;
   counter-reset: track-counter;
}
.accordion-body .repertoire-item {
   grid-template-columns: auto 1fr auto;
   padding-left: 1.5rem;
   padding-right: 1.5rem;
   align-items: center;
}
.accordion-body .repertoire-item::before {
   counter-increment: track-counter;
   content: counter(track-counter);
   display: block;
}

@media (max-width: 640px) {
   .repertoire-item {
      grid-template-columns: auto 1fr;
      grid-template-rows: auto auto;
      column-gap: 1rem; 
      row-gap: 1rem;
      padding: 1rem 0.5rem;
      align-items: start;
   }
   .repertoire-item::before {
      grid-row: 1 / 2;
      grid-column: 1 / 2;
      align-self: center; 
      justify-self: center;
      font-size: 1.25rem;
      line-height: 1.125rem;
      padding-top: 0.1rem;
      text-align: center; 
   }
   .repertoire-info {
      grid-row: 1 / 2;
      grid-column: 2 / 3;
   }
   .repertoire-title {
      font-size: 1.125rem;
      line-height: 1.5rem;
   }
   .btn-repertoire {
      grid-row: 2 / 3;
      grid-column: 2 / 3;
      justify-self: start;
   }
   .accordion-header .setlist-title {
      font-size: 1.125rem;
   }
   .accordion-body .repertoire-item {
      grid-template-columns: auto 1fr;
      grid-template-rows: auto auto;
      align-items: start;
      padding-left: 1rem;
      padding-right: 1rem;
      row-gap: 1rem;
   }
}
</style>